---
import { getCollection } from 'astro:content';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

import { pathList } from '../../../constants/path_list';
import BlogShell from '../../app/layouts/BlogShell.astro';
import { retrieveTranslation } from '../../app/locales/i18n';
import { createBlogPostingStructuredData } from '../../app/structured_data/blog_posting_structured_data';

import 'prismjs/themes/prism-coy.min.css';

import './Entry.css';
import './EntryContents.css';

dayjs.extend(utc);
dayjs.extend(timezone);

export async function getStaticPaths() {
  const blogEntries = await getCollection('entries');

  return blogEntries.map((entry) => ({
    params: { id: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { slug } = entry;
const { Content } = await entry.render();
const { title: entryTitle, excerpt, categories = [], tags = [], publishedAt, revisedAt } = entry.data;

const pagePath = `${pathList.entries}/${slug}`;
const publishedDateString = dayjs(publishedAt).tz('Asia/Tokyo').toISOString();
const revisedDateString = dayjs(revisedAt).tz('Asia/Tokyo').toISOString();

const structuredData = JSON.stringify(
  createBlogPostingStructuredData({
    title: entryTitle,
    content: excerpt ?? '',
    publishedDateString,
    revisedDateString,
  }),
);
---

<BlogShell pageTitle={entryTitle} pageDescription={excerpt ?? ''} pagePath={pagePath}>
  <meta property="og:type" content="article" slot="head" />
  <link rel="dns-prefetch" href="https://platform.twitter.com" slot="head" />
  <link rel="preconnect" href="https://platform.twitter.com" crossorigin="" slot="head" />
  <script src="https://platform.twitter.com/widgets.js" defer slot="head"></script>
  <article>
    <header>
      <time class="PublishedDate" datetime={publishedDateString}>
        {dayjs(publishedAt).tz('Asia/Tokyo').format('YYYY年M月D日')}
      </time>
      <h1>{entryTitle}</h1>
    </header>
    <div class="Contents">
      <Content />
    </div>
    <footer>
      {
        categories.length > 0 && (
          <dl class="EntryMetadataList">
            <dt>{retrieveTranslation('categories.text')}</dt>
            {categories.map((category) => (
              <dd>
                <a href={`${pathList.categories}/${category}`}>{category}</a>
              </dd>
            ))}
          </dl>
        )
      }
      {
        tags.length > 0 && (
          <dl class="EntryMetadataList">
            <dt>{retrieveTranslation('tags.text')}</dt>
            {tags.map((tag) => (
              <dd>
                <a href={`${pathList.tags}/${tag}`}>{tag}</a>
              </dd>
            ))}
          </dl>
        )
      }
    </footer>
  </article>
  <script type="application/ld+json" set:html={structuredData} />
</BlogShell>
